name: 🐧 Godot 4 Vulkan Minimal
on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

jobs:
  linux-sanitizer:
    runs-on: "ubuntu-22.04"
    name: Editor and project

    steps:
      - uses: actions/checkout@v3

      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update

      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm \
            xvfb wget2 unzip scons git

      - name: Configure Project Data
        run: |

          echo "[rendering]" >> project.godot
          echo "renderer/rendering_method=\"forward_plus\"" >> project.godot

      - name: Download reproducer
        run: |
          wget -nv https://github.com/qarmin/Qarminer/releases/download/reproducer/find_minimal_godot_crash -O reproducer
          chmod +x ./reproducer

      - name: Download Godot(GIT)
        run: |
          git clone https://github.com/godotengine/godot.git
          cd godot
          git checkout master
          cd ../

      - name: Compile Godot
        run: |
          cd godot
          scons -j2 dev_build=yes target=editor use_asan=yes use_ubsan=yes linker=gold module_basis_universal_enabled=no module_bmp_enabled=no module_camera_enabled=no module_csg_enabled=no module_cvtt_enabled=no module_dds_enabled=no module_denoise_enabled=no module_enet_enabled=no module_etcpak_enabled=no brotli=no module_gltf_enabled=no module_gridmap_enabled=no module_hdr_enabled=no module_jpg_enabled=no module_jsonrpc_enabled=no module_lightmapper_rd_enabled=no module_mbedtls_enabled=no module_meshoptimizer_enabled=no module_minimp3_enabled=no module_mobile_vr_enabled=no module_msdfgen_enabled=no module_multiplayer_enabled=no module_noise_enabled=no module_ogg_enabled=no module_openxr_enabled=no module_raycast_enabled=no module_regex_enabled=no module_squish_enabled=no graphite=no module_text_server_adv_enabled=no module_tga_enabled=no module_theora_enabled=no module_tinyexr_enabled=no module_upnp_enabled=no module_vhacd_enabled=no module_vorbis_enabled=no module_webp_enabled=no module_webrtc_enabled=no module_websocket_enabled=no module_webxr_enabled=no module_xatlas_unwrap_enabled=no
          cp bin/godot.linuxbsd.editor.dev.x86_64.san ../
          cd ../
          rm -rf godot

      # Download, unzip and setup SwiftShader library
      - name: Download SwiftShader
        run: |
          wget -nv https://github.com/qarmin/gtk_library_store/releases/download/3.24.0/swiftshader3.zip
          unzip swiftshader3.zip
          rm swiftshader3.zip
          curr="$(pwd)/libvk_swiftshader.so"
          sed -i "s|PATH_TO_CHANGE|$curr|" vk_swiftshader_icd.json

      # Make backup of project.godot
      - name: Backup project.godot
        run: |
          cp project.godot project.godot.old

      - name: Open Godot Editor
        run: |
          VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json UBSAN_OPTIONS=suppressions=suppressions.supp DRI_PRIME=0 xvfb-run ./godot.linuxbsd.editor.dev.x86_64.san -e --quit --audio-driver Dummy  --path $(pwd) 2>&1 | tee sanitizers_log.txt || true
          tail -n 300 sanitizers_log.txt > editor_results.txt

      - name: Store editor results
        uses: actions/upload-artifact@v3
        with:
          name: editor-results
          path: editor_results.txt

      - name: Check Godot Editor Log
        run: |
          misc/check_ci_log.py editor_results.txt

      - name: Configure Project Data
        run: |
          rm timer.txt || true
          rm memory_usage.txt || true
          rm results.txt || true
          rm crash_reproduce.gd || true
          echo "" > settings.txt
          cp project.godot.old project.godot

      - name: Run Project SimpleThings
        run: |
          for i in {0..50}; do echo "" >> project_results.txt; done;
          echo "======================================== SimpleThings" 2>&1 | tee sanitizers_log.txt
          VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json UBSAN_OPTIONS=suppressions=suppressions.supp DRI_PRIME=0 timeout -v 660 xvfb-run ./godot.linuxbsd.editor.dev.x86_64.san SimpleThings.tscn 300 --audio-driver Dummy  --path $(pwd) 2>&1 | tee sanitizers_log.txt || true
          tail -n 200 sanitizers_log.txt >> project_results.txt

          if [ -f "results.txt" ]; then
              if [ -f "results_end.txt" ]; then
                  for i in {0..50}; do echo "" >> t.txt; done;
                  cat "results.txt" "t.txt" "results_end.txt" > "temp.txt"
                  mv "temp.txt" "results_end.txt"
              else
                  cp "results.txt" "results_end.txt"
              fi
          fi

          if [ -f "memory_usage.txt" ]; then
              if [ -f "memory_usage_end.txt" ]; then
                  for i in {0..50}; do echo "" >> t.txt; done;
                  cat "memory_usage.txt" "t.txt" "memory_usage_end.txt" > "temp.txt"
                  mv "temp.txt" "memory_usage_end.txt"
              else
                  cp "memory_usage.txt" "memory_usage_end.txt"
              fi
          fi

          if [ -f "timer.txt" ]; then
              if [ -f "timer_end.txt" ]; then
                  for i in {0..50}; do echo "" >> t.txt; done;
                  cat "timer.txt" "t.txt" "timer_end.txt" > "temp.txt"
                  mv "temp.txt" "timer_end.txt"
              else
                  cp "timer.txt" "timer_end.txt"
              fi
          fi

      - name: Configure Project Data
        run: |
          rm timer.txt || true
          rm memory_usage.txt || true
          rm results.txt || true
          rm crash_reproduce.gd || true
          echo "" > settings.txt
          cp project.godot.old project.godot

      - name: Run Project Variant Tester
        run: |
          for i in {0..50}; do echo "" >> project_results.txt; done;
          echo "======================================== Variant Tester" 2>&1 | tee sanitizers_log.txt
          VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json UBSAN_OPTIONS=suppressions=suppressions.supp DRI_PRIME=0 timeout -v 960 xvfb-run ./godot.linuxbsd.editor.dev.x86_64.san VariantTester.tscn 600 --audio-driver Dummy  --path $(pwd) 2>&1 | tee sanitizers_log.txt || true
          tail -n 200 sanitizers_log.txt >> project_results.txt

          if [ -f "results.txt" ]; then
              if [ -f "results_end.txt" ]; then
                  for i in {0..50}; do echo "" >> t.txt; done;
                  cat "results.txt" "t.txt" "results_end.txt" > "temp.txt"
                  mv "temp.txt" "results_end.txt"
              else
                  cp "results.txt" "results_end.txt"
              fi
          fi

          if [ -f "memory_usage.txt" ]; then
              if [ -f "memory_usage_end.txt" ]; then
                  for i in {0..50}; do echo "" >> t.txt; done;
                  cat "memory_usage.txt" "t.txt" "memory_usage_end.txt" > "temp.txt"
                  mv "temp.txt" "memory_usage_end.txt"
              else
                  cp "memory_usage.txt" "memory_usage_end.txt"
              fi
          fi

          if [ -f "timer.txt" ]; then
              if [ -f "timer_end.txt" ]; then
                  for i in {0..50}; do echo "" >> t.txt; done;
                  cat "timer.txt" "t.txt" "timer_end.txt" > "temp.txt"
                  mv "temp.txt" "timer_end.txt"
              else
                  cp "timer.txt" "timer_end.txt"
              fi
          fi

      - name: Configure Project Data
        run: |
          rm timer.txt || true
          rm memory_usage.txt || true
          rm results.txt || true
          rm crash_reproduce.gd || true
          echo "" > settings.txt
          cp project.godot.old project.godot

      - name: Run Project GDScript Fuzzer
        run: |
          for i in {0..50}; do echo "" >> project_results.txt; done;
          echo "======================================== GDScript Fuzzer" 2>&1 | tee sanitizers_log.txt
          VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json UBSAN_OPTIONS=suppressions=suppressions.supp DRI_PRIME=0 timeout -v 960 xvfb-run ./godot.linuxbsd.editor.dev.x86_64.san GDScriptCreator.tscn 600 --audio-driver Dummy  --path $(pwd) 2>&1 | tee sanitizers_log.txt || true
          tail -n 200 sanitizers_log.txt >> project_results.txt

          if [ -f "results.txt" ]; then
              if [ -f "results_end.txt" ]; then
                  for i in {0..50}; do echo "" >> t.txt; done;
                  cat "results.txt" "t.txt" "results_end.txt" > "temp.txt"
                  mv "temp.txt" "results_end.txt"
              else
                  cp "results.txt" "results_end.txt"
              fi
          fi

          if [ -f "memory_usage.txt" ]; then
              if [ -f "memory_usage_end.txt" ]; then
                  for i in {0..50}; do echo "" >> t.txt; done;
                  cat "memory_usage.txt" "t.txt" "memory_usage_end.txt" > "temp.txt"
                  mv "temp.txt" "memory_usage_end.txt"
              else
                  cp "memory_usage.txt" "memory_usage_end.txt"
              fi
          fi

          if [ -f "timer.txt" ]; then
              if [ -f "timer_end.txt" ]; then
                  for i in {0..50}; do echo "" >> t.txt; done;
                  cat "timer.txt" "t.txt" "timer_end.txt" > "temp.txt"
                  mv "temp.txt" "timer_end.txt"
              else
                  cp "timer.txt" "timer_end.txt"
              fi
          fi

      - name: Configure Project Data
        run: |
          rm timer.txt || true
          rm memory_usage.txt || true
          rm results.txt || true
          rm crash_reproduce.gd || true
          echo "" > settings.txt
          cp project.godot.old project.godot

      - name: Run Project Default
        run: |
          for i in {0..50}; do echo "" >> project_results.txt; done;
          echo "======================================== Default" 2>&1 | tee sanitizers_log.txt
          VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json UBSAN_OPTIONS=suppressions=suppressions.supp DRI_PRIME=0 timeout -v 1260 xvfb-run ./godot.linuxbsd.editor.dev.x86_64.san FunctionExecutor.tscn 900 --audio-driver Dummy  --path $(pwd) 2>&1 | tee sanitizers_log.txt || true
          tail -n 200 sanitizers_log.txt >> project_results.txt

          if [ -f "results.txt" ]; then
              if [ -f "results_end.txt" ]; then
                  for i in {0..50}; do echo "" >> t.txt; done;
                  cat "results.txt" "t.txt" "results_end.txt" > "temp.txt"
                  mv "temp.txt" "results_end.txt"
              else
                  cp "results.txt" "results_end.txt"
              fi
          fi

          if [ -f "memory_usage.txt" ]; then
              if [ -f "memory_usage_end.txt" ]; then
                  for i in {0..50}; do echo "" >> t.txt; done;
                  cat "memory_usage.txt" "t.txt" "memory_usage_end.txt" > "temp.txt"
                  mv "temp.txt" "memory_usage_end.txt"
              else
                  cp "memory_usage.txt" "memory_usage_end.txt"
              fi
          fi

          if [ -f "timer.txt" ]; then
              if [ -f "timer_end.txt" ]; then
                  for i in {0..50}; do echo "" >> t.txt; done;
                  cat "timer.txt" "t.txt" "timer_end.txt" > "temp.txt"
                  mv "temp.txt" "timer_end.txt"
              else
                  cp "timer.txt" "timer_end.txt"
              fi
          fi

      - name: Run reproducer
        run: |
          echo "extends Node" > temp.txt
          echo "func _process(delta):" >> temp.txt
          if [ -f results.txt ]; then
            cat temp.txt results.txt > Node.gd.test || true
            VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json UBSAN_OPTIONS=suppressions=suppressions.supp DRI_PRIME=0 timeout -v 3600 ./reproducer godot.linuxbsd.editor.dev.x86_64.san 60_50 .  --audio-driver Dummy # || echo "ERROR: REPRODUCER FAILURE"
          fi

      - name: Store reproducer
        uses: actions/upload-artifact@v3
        with:
          name: reproducer_4_vulkan_minimal_default_36
          path: crash_reproduce.gd
          if-no-files-found: ignore

      - name: Store project results
        uses: actions/upload-artifact@v3
        with:
          name: project-results
          path: project_results.txt

      - name: Store test results
        uses: actions/upload-artifact@v3
        with:
          name: last-run-functions
          path: results_end.txt

      - name: Store timer results
        uses: actions/upload-artifact@v3
        with:
          name: timer
          path: timer_end.txt
          if-no-files-found: ignore

      - name: Store memory usage results
        uses: actions/upload-artifact@v3
        with:
          name: memory-usage
          path: memory_usage_end.txt
          if-no-files-found: ignore

      - name: Check Log
        run: |
          misc/check_ci_log.py project_results.txt
