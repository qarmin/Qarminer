name: 🐧 Godot 4 Vulkan Minimal
on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

jobs:
  linux-sanitizer:
    runs-on: "ubuntu-20.04"
    name: Editor and project

    steps:
      - uses: actions/checkout@v2

      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update

      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm \
            xvfb wget2 unzip python scons git

      - name: Download Godot(GIT)
        run: |
          git clone https://github.com/godotengine/godot.git
          cd godot
          git checkout master
          cd ../

      - name: Compile Godot
        run: |
          cd godot
          wget https://patch-diff.githubusercontent.com/raw/godotengine/godot/pull/52075.patch -O 3x.patch
          wget https://patch-diff.githubusercontent.com/raw/godotengine/godot/pull/49053.patch -O 4.patch
          git apply 4.patch
          scons -j2 use_asan=yes use_ubsan=yes linker=gold
          cp bin/godot.linuxbsd.tools.x86_64.san ../
          cd ../
          rm -rf godot

      # Download, unzip and setup SwiftShader library
      - name: Download SwiftShader
        run: |
          wget https://github.com/qarmin/gtk_library_store/releases/download/3.24.0/swiftshader3.zip
          unzip swiftshader3.zip
          rm swiftshader3.zip
          curr="$(pwd)/libvk_swiftshader.so"
          sed -i "s|PATH_TO_CHANGE|$curr|" vk_swiftshader_icd.json

      - name: Open Godot Editor
        run: |
          VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json DRI_PRIME=0 xvfb-run ./godot.linuxbsd.tools.x86_64.san -e --quit --audio-driver Dummy  --path $(pwd) 2>&1 | tee sanitizers_log.txt || true
          tail -n 300 sanitizers_log.txt > editor_results.txt

      - name: Store editor results
        uses: actions/upload-artifact@v2
        with:
          name: editor-results
          path: editor_results.txt

      - name: Check Godot Editor Log
        run: |
          misc/check_ci_log.py sanitizers_log.txt

      - name: Run Project Variant Tester
        run: |
          echo "======================================== Variant Tester" 2>&1 | tee sanitizers_log.txt
          VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json DRI_PRIME=0 timeout -v 14400 xvfb-run ./godot.linuxbsd.tools.x86_64.san VariantTester.tscn 900 --audio-driver Dummy  --path $(pwd) 2>&1 | tee sanitizers_log.txt || true
          tail -n 300 sanitizers_log.txt > project_results.txt

          if [ -f "results.txt" ]; then
              if [ -f "results_end.txt" ]; then
                  echo "" > t.txt;echo "================ NEW_LINE ===============" >> t.txt;echo "" >> t.txt
                  cat "results.txt" "t.txt" "results_end.txt" > "temp.txt"
                  mv "temp.txt" "results_end.txt"
              else
                  cp "results.txt" "results_end.txt"
              fi
          fi

          if [ -f "memory_usage.txt" ]; then
              if [ -f "memory_usage_end.txt" ]; then
                  echo "" > t.txt;echo "================ NEW_LINE ===============" >> t.txt;echo "" >> t.txt
                  cat "memory_usage.txt" "t.txt" "memory_usage_end.txt" > "temp.txt"
                  mv "temp.txt" "memory_usage_end.txt"
              else
                  cp "memory_usage.txt" "memory_usage_end.txt"
              fi
          fi

          if [ -f "timer.txt" ]; then
              if [ -f "timer_end.txt" ]; then
                  echo "" > t.txt;echo "================ NEW_LINE ===============" >> t.txt;echo "" >> t.txt
                  cat "timer.txt" "t.txt" "timer_end.txt" > "temp.txt"
                  mv "temp.txt" "timer_end.txt"
              else
                  cp "timer.txt" "timer_end.txt"
              fi
          fi

      - name: Run Project GDScript Fuzzer
        run: |
          echo "======================================== GDScript Fuzzer" 2>&1 | tee sanitizers_log.txt
          VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json DRI_PRIME=0 timeout -v 14400 xvfb-run ./godot.linuxbsd.tools.x86_64.san GDScriptCreator.tscn 900 --audio-driver Dummy  --path $(pwd) 2>&1 | tee sanitizers_log.txt || true
          tail -n 300 sanitizers_log.txt > project_results.txt

          if [ -f "results.txt" ]; then
              if [ -f "results_end.txt" ]; then
                  echo "" > t.txt;echo "================ NEW_LINE ===============" >> t.txt;echo "" >> t.txt
                  cat "results.txt" "t.txt" "results_end.txt" > "temp.txt"
                  mv "temp.txt" "results_end.txt"
              else
                  cp "results.txt" "results_end.txt"
              fi
          fi

          if [ -f "memory_usage.txt" ]; then
              if [ -f "memory_usage_end.txt" ]; then
                  echo "" > t.txt;echo "================ NEW_LINE ===============" >> t.txt;echo "" >> t.txt
                  cat "memory_usage.txt" "t.txt" "memory_usage_end.txt" > "temp.txt"
                  mv "temp.txt" "memory_usage_end.txt"
              else
                  cp "memory_usage.txt" "memory_usage_end.txt"
              fi
          fi

          if [ -f "timer.txt" ]; then
              if [ -f "timer_end.txt" ]; then
                  echo "" > t.txt;echo "================ NEW_LINE ===============" >> t.txt;echo "" >> t.txt
                  cat "timer.txt" "t.txt" "timer_end.txt" > "temp.txt"
                  mv "temp.txt" "timer_end.txt"
              else
                  cp "timer.txt" "timer_end.txt"
              fi
          fi

      - name: Run Project Default
        run: |
          echo "======================================== Default" 2>&1 | tee sanitizers_log.txt
          VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json DRI_PRIME=0 timeout -v 14400 xvfb-run ./godot.linuxbsd.tools.x86_64.san FunctionExecutor.tscn 1800 --audio-driver Dummy  --path $(pwd) 2>&1 | tee sanitizers_log.txt || true
          tail -n 300 sanitizers_log.txt > project_results.txt

          if [ -f "results.txt" ]; then
              if [ -f "results_end.txt" ]; then
                  echo "" > t.txt;echo "================ NEW_LINE ===============" >> t.txt;echo "" >> t.txt
                  cat "results.txt" "t.txt" "results_end.txt" > "temp.txt"
                  mv "temp.txt" "results_end.txt"
              else
                  cp "results.txt" "results_end.txt"
              fi
          fi

          if [ -f "memory_usage.txt" ]; then
              if [ -f "memory_usage_end.txt" ]; then
                  echo "" > t.txt;echo "================ NEW_LINE ===============" >> t.txt;echo "" >> t.txt
                  cat "memory_usage.txt" "t.txt" "memory_usage_end.txt" > "temp.txt"
                  mv "temp.txt" "memory_usage_end.txt"
              else
                  cp "memory_usage.txt" "memory_usage_end.txt"
              fi
          fi

          if [ -f "timer.txt" ]; then
              if [ -f "timer_end.txt" ]; then
                  echo "" > t.txt;echo "================ NEW_LINE ===============" >> t.txt;echo "" >> t.txt
                  cat "timer.txt" "t.txt" "timer_end.txt" > "temp.txt"
                  mv "temp.txt" "timer_end.txt"
              else
                  cp "timer.txt" "timer_end.txt"
              fi
          fi

      - name: Store project results
        uses: actions/upload-artifact@v2
        with:
          name: project-results
          path: project_results.txt

      - name: Store test results
        uses: actions/upload-artifact@v2
        with:
          name: last-run-functions
          path: results_end.txt

      - name: Store timer results
        uses: actions/upload-artifact@v2
        with:
          name: timer
          path: timer_end.txt

      - name: Store memory usage results
        uses: actions/upload-artifact@v2
        with:
          name: memory-usage
          path: memory_usage_end.txt

      - name: Check Log
        run: |
          misc/check_ci_log.py project_results.txt