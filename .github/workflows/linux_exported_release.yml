name: 🐧 Godot 3.5 Exported Release
on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * 6'

jobs:
  linux-exported-release:
    runs-on: "ubuntu-22.04"
    name: Editor and project

    steps:
      - uses: actions/checkout@v3

      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update

      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm \
            xvfb wget2 unzip python3 scons git

      - name: Backup project.godot
        run: |
          cp project.godot project.godot.old

      - name: Download reproducer
        run: |
          wget -nv https://github.com/qarmin/Qarminer/releases/download/reproducer/find_minimal_godot_crash -O reproducer
          chmod +x ./reproducer

      - name: Download Godot(GIT)
        run: |
          git clone https://github.com/godotengine/godot.git
          cd godot
          git checkout 3.5
          cd ../

      - name: Compile Godot
        run: |
          cd godot
          scons -j2 use_asan=yes use_ubsan=yes
          cp bin/godot.x11.tools.64s ../
          git clean -xqdf
          scons -j2 tools=no target=release debug_symbols=yes use_asan=yes use_ubsan=yes optimize=none CCFLAGS="-DDEBUG_METHODS_ENABLED"
          cp bin/godot.x11.opt.64s ../
          cd ../
          rm -rf godot

      - name: Configure Project Data
        run: |
          echo "" > settings.txt
          echo "disabled_classes_append:" >> settings.txt
          echo "Image" >> settings.txt
          echo "function_exceptions_append:" >> settings.txt
          echo "_screen_input" >> settings.txt # Uses internally Image functions
          echo "get_bind_bone" >> settings.txt
          echo "get_bind_pose" >> settings.txt
          echo "get_bind_name" >> settings.txt

      - name: Exporting project
        run: |
          curr="$(pwd)/godot.x11.opt.64s"
          sed -i "s|PATH_TO_CHANGE|$curr|" export_presets.cfg
          DRI_PRIME=0 xvfb-run ./godot.x11.tools.64s --audio-driver Dummy --export-debug "Linux/X11" test_project 2>&1 | tee exporting.txt || true
          
      - name: Store exporting results
        uses: actions/upload-artifact@v3
        with:
          name: exporting-results
          path: exporting.txt

      - name: Run Project
        run: |
          DRI_PRIME=0 xvfb-run ./test_project 3600 --audio-driver Dummy 2>&1 | tee sanitizers_log.txt || true
          tail -n 300 sanitizers_log.txt > project_results.txt

      - name: Run reproducer
        run: |
          echo "extends Node" > temp.txt
          echo "func _process(delta):" >> temp.txt
          if [ -f results.txt ]; then
            cat temp.txt results.txt > Node.gd.test || true
            VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json UBSAN_OPTIONS=suppressions=suppressions.supp DRI_PRIME=0 timeout -v 3600 ./reproducer test_project 60_50 . --video-driver GLES2 --audio-driver Dummy # || echo "ERROR: REPRODUCER FAILURE"
          fi

      - name: Store reproducer
        uses: actions/upload-artifact@v3
        with:
          name: reproducer_3_x_exported
          path: crash_reproduce.gd
          if-no-files-found: ignore
          
      - name: Store project results
        uses: actions/upload-artifact@v3
        with:
          name: project-results
          path: project_results.txt

      - name: Store test results
        uses: actions/upload-artifact@v3
        with:
          name: last-run-functions
          path: results.txt

      - name: Check Log
        run: |
          misc/check_ci_log.py project_results.txt
