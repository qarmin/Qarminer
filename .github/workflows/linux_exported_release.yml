name: 🐧 Godot 4 Exported Release
on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

jobs:
  linux-exported-release:
    runs-on: "ubuntu-22.04"
    name: Editor and project

    steps:
      - uses: actions/checkout@v3

      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update

      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm \
            xvfb wget2 unzip scons git

      - name: Backup project.godot
        run: |
          cp project.godot project.godot.old

      - name: Download reproducer
        run: |
          wget -nv https://github.com/qarmin/Qarminer/releases/download/reproducer/find_minimal_godot_crash -O reproducer
          chmod +x ./reproducer
           
      - name: Download Godot(GIT)
        run: |
          git clone https://github.com/godotengine/godot.git
          cd godot
          git checkout master
          cd ../

      - name: Compile Godot
        run: |
          cd godot
          wget https://patch-diff.githubusercontent.com/raw/godotengine/godot/pull/49053.patch -O 4.patch
          git apply 4.patch
          scons -j2 dev_build=yes use_asan=yes use_ubsan=yes linker=gold
          cp bin/godot.linuxbsd.editor.dev.x86_64.san ../
          git clean -xqdf
          scons -j2 target=template_release optimize=none debug_symbols=yes use_asan=yes use_ubsan=yes optimize=none CCFLAGS="-fsanitize=shift,shift-exponent,integer-divide-by-zero,unreachable,vla-bound,null,return,signed-integer-overflow,bounds,float-divide-by-zero,float-cast-overflow,nonnull-attribute,returns-nonnull-attribute,bool,enum,vptr -DDEBUG_METHODS_ENABLED" linker=gold
          cp bin/godot.linuxbsd.template_release.x86_64.san ../
          cd ../
          rm -rf godot

      - name: Remove broken project files
        run: |
          rm SingletonTesting.tscn
          mv Node.tscn Node.tscn2

      # Download, unzip and setup SwiftShader library
      - name: Download SwiftShader
        run: |
          wget https://github.com/qarmin/gtk_library_store/releases/download/3.24.0/swiftshader3.zip
          unzip swiftshader3.zip
          rm swiftshader3.zip
          curr="$(pwd)/libvk_swiftshader.so"
          sed -i "s|PATH_TO_CHANGE|$curr|" vk_swiftshader_icd.json

      - name: Exporting project
        run: |
          curr="$(pwd)/godot.linuxbsd.template_release.x86_64.san"
          sed -i "s|PATH_TO_CHANGE|$curr|" export_presets.cfg
          VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json DRI_PRIME=0 xvfb-run ./godot.linuxbsd.editor.dev.x86_64.san --audio-driver Dummy --export-debug "Linux/X11" test_project 2>&1 | tee exporting.txt || true
          mkdir tp
          cp ./test_project tp
          cp ./test_project.pck tp
          
      - name: Store exporting results
        uses: actions/upload-artifact@v3
        with:
          name: exporting-results
          path: exporting.txt
          
      - name: Store exported binaries
        uses: actions/upload-artifact@v3
        with:
          name: test_project
          path: tp

      - name: Restore broken project files
        run: |
          mv Node.tscn2 Node.tscn
          
      # Headless
      - name: Run Project
        run: |
          VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json DRI_PRIME=0 xvfb-run tp/test_project 1200 --headless 2>&1 | tee sanitizers_log.txt || true
          tail -n 300 sanitizers_log.txt > project_results.txt

      - name: Run reproducer
        run: |
          echo "extends Node" > temp.txt
          echo "func _process(delta):" >> temp.txt
          if [ -f results.txt ]; then
            cat temp.txt results.txt > Node.gd.test || true
            VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json UBSAN_OPTIONS=suppressions=suppressions.supp DRI_PRIME=0 timeout -v 3600 ./reproducer test_project 60_50 . --headless
          fi

      - name: Store reproducer
        uses: actions/upload-artifact@v3
        with:
          name: reproducer_4_test_project_headless
          path: crash_reproduce.gd
          if-no-files-found: ignore
          
      # Vulkan
      - name: Run Project
        run: |
          VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json DRI_PRIME=0 xvfb-run tp/test_project 1200 2>&1 | tee sanitizers_log.txt || true
          tail -n 300 sanitizers_log.txt > project_results.txt

      - name: Run reproducer
        run: |
          echo "extends Node" > temp.txt
          echo "func _process(delta):" >> temp.txt
          if [ -f results.txt ]; then
            cat temp.txt results.txt > Node.gd.test || true
            VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json UBSAN_OPTIONS=suppressions=suppressions.supp DRI_PRIME=0 timeout -v 3600 ./reproducer test_project 60_50 .
          fi

      - name: Store reproducer
        uses: actions/upload-artifact@v3
        with:
          name: reproducer_4_test_project_vulkan
          path: crash_reproduce.gd
          if-no-files-found: ignore
          
      # GLES3
      - name: Run Project
        run: |
          VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json DRI_PRIME=0 xvfb-run tp/test_project 1200 --rendering-driver opengl3 2>&1 | tee sanitizers_log.txt || true
          tail -n 300 sanitizers_log.txt > project_results.txt

      - name: Run reproducer
        run: |
          echo "extends Node" > temp.txt
          echo "func _process(delta):" >> temp.txt
          if [ -f results.txt ]; then
            cat temp.txt results.txt > Node.gd.test || true
            VK_ICD_FILENAMES=$(pwd)/vk_swiftshader_icd.json UBSAN_OPTIONS=suppressions=suppressions.supp DRI_PRIME=0 timeout -v 3600 ./reproducer test_project 60_50 . --rendering-driver opengl3
          fi

      - name: Store reproducer
        uses: actions/upload-artifact@v3
        with:
          name: reproducer_4_test_project_gles3
          path: crash_reproduce.gd
          if-no-files-found: ignore
          
          

      - name: Store project results
        uses: actions/upload-artifact@v3
        with:
          name: project-results
          path: project_results.txt

      - name: Store test results
        uses: actions/upload-artifact@v3
        with:
          name: last-run-functions
          path: results.txt

      - name: Check Log
        run: |
          misc/check_ci_log.py project_results.txt
